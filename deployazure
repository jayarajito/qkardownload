https://learn.microsoft.com/en-us/training/modules/publish-static-web-app-api-preview-url/1-introduction?pivots=react

Create a repository
To begin, create a repository by using a GitHub template. A series of repository templates are available, which contain a starter app implemented in various front end frameworks.


Go to the GitHub create from template page to open the template repository.

https://github.com/new?template_name=mslearn-staticwebapp-api&template_owner=MicrosoftDocs
  
If prompted for Owner, select one of your GitHub accounts.

For repository name, enter my-static-web-app-and-api.

Select Create repository from template.

As you create the project from a template, GitHub builds your repository in the background.


  Run your app locally
Now you have a GitHub repository named my-static-web-app-and-api in your GitHub account. Next, you clone the GitHub repo and run the code locally on your computer.

Open a terminal window on your computer.

If you're on Windows, you can enter cmd in the system tray search box.

To clone the repository to your machine, paste the following code into the command prompt window.

Make sure to replace <YOUR_GITHUB_USERNAME> with your GitHub username.


  git clone https://github.com/jayarajito/my-static-web-app-and-api

git push https://github.com/jayarajito/my-static-web-app-and-api

  Change to the directory for the source code you cloned.

  cd my-static-web-app-and-api

  Go to the directory for your preferred front end framework.
  cd react-app


install python and check the verison python --version
  Install the application dependencies 
  npm install

https://nouthemes.com/knowledge-base/node-sass-command-failed-when-running-npm-install/
https://github.com/nodejs/help/issues/3928




  Ensure the latest version of each dependency is installed with the following command.

  npm audit fix

  Run the front end client application.

  npm start

react-app-new   use this folder and remove export use set and remove outputlocation

For MAC use "export " for WINDOWS "set" 
https://github.com/mattmakai/slack-starterbot/issues/6
https://codeforgeek.com/resolving-error-node-modules-node-sass-command-failed/


Why VS Code contains emphasized items but no error?

Reload VS with the command Ctrl + shift + p and searching Developer: Reload Window

  Browse to your app
When the application bundle is generated and compiled, a browser tab automatically opens to display your application running locally.

Local host for react is http://localhost:3000.

  Your app should say Loading data ... because there's no data or API yet. You add the API for your web app later in this lesson.

In the terminal, press Ctrl+C to stop your batch job.


  Create a static web app
You created your own GitHub repository. Now you can create your own static web app using the Azure Static Web Apps extension for Visual Studio Code.
  Install the Azure Static Web Apps extension for Visual Studio Code
  
Open Visual Studio Code.

From the top menu, select View > Extensions, and enter Azure Static Web Apps in the search box.

When the extension tab loads in Visual Studio Code, select Install.

  Open the application folder
Select F1 to open the Visual Studio Code command palette.

Enter File: Open Folder....

Select the my-static-web-app-and-api folder.

Select Open to open the folder in Visual Studio Code.

  Sign in to Azure in Visual Studio Code
Select F1 to open the Visual Studio Code command palette.

Enter Azure: Sign In and follow the prompts to authenticate.

  Select your subscription
Select F1 to open the Visual Studio Code command palette.

Enter Azure: Select Subscriptions, and clear all selections except the Concierge Subscription.

  Commit changes
When you installed the application dependencies, some of the files in your project were updated in the process. In order to proceed, you need to commit those changes to the repository.

Select F1 to open the Visual Studio Code command palette.

Enter and select Git Commit All.

Enter initial commit to the top of the file.

Save and close the git commit file.

Don't worry about syncing your changes with the server at this point. The updates are copied up to GitHub when you publish the static web app.


Create the static web app
Current Azure and GitHub authenticated sessions are required to create a static web app. If you aren't already signed in to both providers, the extension prompts you to sign in during the creation process.

Select F1 to open the Visual Studio Code command palette.
Enter and select Azure Static Web Apps: Create Static Web App....

Enter the following values for the remainder of the command palette prompts.

Prompt	Value
Subscription	Select the Concierge Subscription
Name	Enter my-static-web-app-and-api
Region	Select the region closest to you
Preset	Select React
Application code location	Enter react-app
Output location	Enter dist

Once the app is created, a confirmation notification is shown in Visual Studio Code.

Pull the changes from GitHub
Pull the latest changes from GitHub to bring down the workflow file created by Azure Static Web Apps service.

Open the Command Palette by pressing Ctrl+Shift+P.

Enter and select Git: Pull.

Press Enter.

Your shopping list web app needs an API. In this exercise, you build and run your API using an Azure Functions project. From there, you extend the API with a new function using the Azure Functions extension for Visual Studio Code.

In this exercise, you complete the following steps:

Create a branch as you prepare to make changes to your web app.
Explore the Azure Function project.
Create the HTTP GET function.
Replace the function starter code with logic to get products.
Configure the web app to proxy HTTP requests to the API.
Run the API and the web app.


Create an API branch
Before making changes to an app, it's good practice to create a new branch for the changes. You're about to complete the API for your app, so now is a good time to create a branch.

In Visual Studio Code, open the command palette by pressing F1.

Enter and select Git: Checkout to....

Select Create new branch.

Enter api for the new branch name, and press Enter.

You just created the api git branch.

Open the command palette by pressing F1.

Enter and select Git: Commit All.

Enter the commit message api and press Enter.



Create the HTTP GET function
Your API has routes for manipulating the products for the shopping list, but it lacks a route for getting the products. Let's add that now.


Install the Azure Functions extension for Visual Studio Code
You can create and manage Azure Functions applications by using the Azure Functions extension for Visual Studio Code.

Go to the Visual Studio Marketplace, and install the Azure Functions extension for Visual Studio Code.

When the extension tab loads in Visual Studio Code, select Install.

After installation is complete, select Reload.

 Note

Be sure to install the Azure Functions Core Tools, which allow you to run Azure Functions locally.

https://learn.microsoft.com/en-us/azure/azure-functions/functions-run-local?tabs=windows%2Cisolated-process%2Cnode-v4%2Cpython-v2%2Chttp-trigger%2Ccontainer-apps&pivots=programming-language-javascript


Create the function
Now you extend your Azure Function app with a function to get your products.

In Visual Studio Code, open the command palette by pressing F1.

Enter and select Azure Functions: Create Function.

When prompted to create a function, select HTTP Trigger.

Enter products-get as the name of the function.

Select Anonymous as the authentication level.

 Note

The Functions app is in the api folder, which separates it from the individual web app projects. All of the web apps using the front-end frameworks make calls to the same API. You can decide how to structure your application, but for this sample it helps to see them separated.

Configure the HTTP Method and route endpoint
Notice the folder api/products-get contains the file function.json. This file contains the configuration for your function.

The route endpoint has the same name as the folder that contains the function, by convention. Because the function is created in the products-get folder, the route endpoint is generated as products-get, by default. However, you want the endpoint to be products.

Configure your function:

Open the file api/products-get/function.json.

Notice the methods allow both GET and POST.

Change the methods array to only allow GET requests.

Add a "route": "products" entry after the methods array.

Now your function is triggered on an HTTP GET request to products. Your function.json should look like the following code:

JSON

Copy
{
  "bindings": [
    {
      "authLevel": "anonymous",
      "type": "httpTrigger",
      "direction": "in",
      "name": "req",
      "methods": ["get"],
      "route": "products"
    },
    {
      "type": "http",
      "direction": "out",
      "name": "res"
    }
  ]
}
Update the function logic
The file index.js in the folder api/products-get contains logic that runs when your make an HTTP request to the route.

You need to update the logic to get your products. There's data access logic in the JavaScript module /shared/product-data.js. The product-data module exposes a function getProducts to get the products for the shopping list.

Now, change the function endpoint to return the products:

Open the file api/products-get/index.js.

Replace its contents with the following code:

JavaScript

Copy
const data = require('../shared/product-data');

module.exports = async function (context, req) {
  try {
    const products = data.getProducts();
    context.res.status(200).json(products);
  } catch (error) {
    context.res.status(500).send(error);
  }
};
Your function gets the products and returns them with a status code of 200, when successful.

Configure Cross-Origin Resource Sharing (CORS) locally
You don't have to worry about CORS when you publish to Azure Static Web Apps. Azure Static Web Apps automatically configures your app so it can communicate with your API on Azure using a reverse proxy. But when running locally, you need to configure CORS to allow your web app and API to communicate.

Now, tell Azure Functions to allow your web app to make HTTP requests to the API, on your computer.

Create a file named api/local.settings.json.

Add the following contents to the file:

JSON

Copy
{
  "Host": {
    "CORS": "http://localhost:3000"
  }
}
 Note

The local.settings.json file is listed in the .gitignore file, which prevents this file from being pushed to GitHub. This is because you could store secrets in this file that you would not want in GitHub. This is why you had to create the file when you created your repo from the template.

Run the API
Now it's time to watch your web app and Azure Functions project work together. Start by running your Azure Functions project locally by following these steps:

 Note

Be sure to install the Azure Functions Core Tools, which allow you to run Azure Functions locally.

Open a git terminal and go to the api folder:

Bash

Copy
cd api
Run the Azure Functions app locally:

Bash

Copy
npm install
Bash

Copy
npm start
